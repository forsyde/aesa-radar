
<!-- In @sec:shallow we present an initial approach to -->
<!-- modeling the AESA application in ForSyDe-Shallow, as chain of processes operation on cubes -->
<!-- of data. In @sec:atom we first model the AESA application in ForSyDe-Atom from two -->
<!-- different, yet isomorphic perspectives: in @sec:atom-operation we use the same approach as -->
<!-- the previous one; followed by @sec:atom-network, where we regard the model as a parallel -->
<!-- network of processes operating on individual incoming streams of data. -->


## Pulse compression atom

In fact, as shown in @fig:pc-samp samples _are_ actually arriving in synchronous
streams from the DBF stage, as an effect of the initial assumption. This in turn
creates a perfect match to exploit the application's inherent potential for
parallelism by feeding each arriving beam into a pipelined $N$-tap FIR filter. The
resulting process network is depicted in @fig:pc-net-atom where the
[`farm`](https://forsyde.github.io/forsyde-atom/api/ForSyDe-Atom-Skeleton-Vector.html#v:farm22)
and
[`reduce`](https://forsyde.github.io/forsyde-atom/api/ForSyDe-Atom-Skeleton-Vector.html#v:reduce)
skeletons are captured by appropriate graphical primitives, suggesting the structured
replication of a certain composite process.


> pc :: Beam (SY.Signal CpxData)
>    -> Beam (SY.Signal CpxData)
> pc = V.farm11 (fir' addProc mulProc delayCount mkPcCoefs)
>   where
>     addProc    = SY.comb21 (+)
>     mulProc c  = SY.comb11 (*c)
>     delayCount = fst . SY.stated12 countBin (0, nb)
>     countBin _ 0 _ = (0, nb)
>     countBin _ c s = (s, c-1)

![PC network](figs/pc-net-atom.pdf){#fig:pc-net-atom}

In @fig:pc-net-atom we instantiate an $N$-tap FIR filter for each beam
signal by using the `fir'`[^firA] skeleton which takes as arguments a)
a process used as kernel operation for reduction; b) a process for
scaling each tap with the according coefficient; c) a process for
delaying each tap and d) a vector with $N$ coefficients; and
replicates and connects each process accordingly to form the
well-known FIR-filter pattern.

The FIR skeleton, as other skeletons, is not only parametric, but also
orthogonal from "what" it is performing. Its role is simply to
describe a "pattern" of structured composition, abstracting away the
operations which are actually performed. The operations passed as
arguments fix the semantics of the process network: if they are
functions on values, then the network becomes a parallel algorithm; if
they are processes on signals, then it becomes a network of concurrent
processes. Another advantage with this orthogonal scheme is that we
can elegantly customize our design, as seen in @fig:pc-net-atom, where
instead of a simple
[`delay`](https://forsyde.github.io/forsyde-atom/api/ForSyDe-Atom-MoC-SY.html#v:delay)
process for delaying the FIR taps, we pass a
[`stated`](https://forsyde.github.io/forsyde-atom/api/ForSyDe-Atom-MoC-SY.html#v:stated22)
process structured like in @fig:pc-counter-atom which both delays the
taps, but also flushes the FIR pipeline after $N_b$ samples. This
needs to be done in order to preserve the behavior of the application
as specified in @sec:video-chain-spec: each pulse of range bins needs
to be computed independently from each other.

![`countDelay` process structure](figs/pc-counter-atom.pdf){#fig:pc-counter-atom}


**OBS:** notice that we have used some strange functions `(+:)` and `(*:)` instead of
`(+)` and `(*)` for complex numeral addition, respectively multiplication. These
custom operators are defined in `ForSyDe.Deep.Complex` and perform exactly the two
well-known operations, but relax the base type of `Complex a` to be of any `Num` type
instance instead of forcing it be a member of the `RealFloat` class (see
[`Data.Complex`
API](http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Complex.html)). Although
this does not make any improvement in particular at the time, it makes the code of
`pcFIR` much more reusable in future refinement stages.


As of the second bullet point above, we define one reset counter `rCounter`

> rCounterSys :: SysDef (Signal (Complex Fixed20) -> Signal Bool)
> rCounterSys = newSysDef (mooreSY "rCounterProc" count reset 0)
>               "rCounter" ["i1"] ["o1"]
>   where
>     count = $(newProcFun
>                [d|cntf :: Int16 -> Complex Fixed20 -> Int16  
>                   cntf c _ = if c == 1024-1 then 0 else c+1 |])
>     reset = $(newProcFun
>                [d|rstf :: Int16 -> Bool 
>                   rstf c = if c==1024-1 then True else False |])

and a resettable delay (state) element.

> delaySys :: SysDef (Signal Bool -> Signal (Complex Fixed20) -> Signal (Complex Fixed20))
> delaySys = newSysDef (scanld2SY "rDelayProc" reset (0:+0))
>            "rDelay" ["rst", "i1"] ["o1"]
>   where
>     reset = $(newProcFun
>                [d|rstd :: Complex Fixed20 -> Bool -> Complex Fixed20 -> Complex Fixed20 
>                   rstd _ r p = if r then (0:+0) else p |])

To instantiate the logarithmic reduction tree, it is enough to replace the `reduce`
skeleton with the `logReduce` skeleton in the previous `deepFIR` process network
constructor. Furthermore, we decouple the reset counter to be outside the FIR network
thus we pass the reset signal as an argument to the network constructor, and we use
the `generate2` skeleton to apply this signal to all the delay elements.

> balancedFIR name addSys mulSys dlySys coefs rstSig =
>   Sk.logReduce (name L.++ "add_") addSys
>   . Sk.farm21 (name L.++ "_mul_") mulSys coefs
>   . Sk.generate2 (name L.++ "_dly_") n dlySys (copy n rstSig)
>   where n = lengthT coefs

The new `procPC` system definition is created using the skeleton above. The reset
signal is obtained by creating one instance (see @fig:deep-syntax) of the counter
system applied on the input signal.

> procPCSys' :: SysDef (  Signal (Complex Fixed20)
>                      -> Signal (Complex Fixed20) ) 
> procPCSys' = newSysDef firSys "FIR" ["i1"] ["o1"]    
>   where
>     firSys s = balancedFIR "fir" addSys mulSys delaySys coefsR3 (rstSig s) s
>     rstSig s = (instantiate "rCount" rCounterSys s)
